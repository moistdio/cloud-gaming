version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "7100:7100"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://148.251.51.138:7200
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    ports:
      - "7200:7200"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:7400/cloudgaming
      - JWT_SECRET=your-super-secret-key-change-in-production
      - PORT=7200
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:14
    ports:
      - "7400:7400"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cloudgaming
    command: -p 7400
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 7400"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 