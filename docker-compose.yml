version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cloudstream-postgres
    environment:
      POSTGRES_DB: cloudstream
      POSTGRES_USER: cloudstream
      POSTGRES_PASSWORD: cloudstream123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cloudstream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudstream"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cloudstream-redis
    command: redis-server --appendonly yes --requirepass cloudstream123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cloudstream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.simple
    container_name: cloudstream-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://cloudstream:cloudstream123@postgres:5432/cloudstream
      - REDIS_URL=redis://:cloudstream123@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - STEAM_API_KEY=${STEAM_API_KEY}
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudstream-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Frontend Web App
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.simple
    container_name: cloudstream-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3002
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - cloudstream-network
    restart: unless-stopped

  # Streaming Service (Simplified)
  streaming:
    build:
      context: .
      dockerfile: docker/streaming/Dockerfile.simple
    container_name: cloudstream-streaming
    environment:
      - DISPLAY=:0
      - STREAMING_QUALITY=1080p
      - STREAMING_FPS=60
    ports:
      - "47989:47989/tcp"
      - "47989:47989/udp"
      - "5900:5900" # VNC
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ./docker/streaming/config:/config
      - steam_data:/home/steam
    networks:
      - cloudstream-network
    restart: unless-stopped

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cloudstream-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    networks:
      - cloudstream-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cloudstream-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cloudstream-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cloudstream-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cloudstream-network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cloudstream-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - cloudstream-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  steam_data:
    driver: local

networks:
  cloudstream-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16 